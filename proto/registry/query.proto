syntax = "proto3";
package pricechain.cprc.registry;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "registry/params.proto";
import "registry/registry.proto";
import "registry/registry_owner.proto";
import "registry/registry_member.proto";
import "registry/price_consensus.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/PriceChain/cprc/x/registry/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/PriceChain/cprc/registry/params";
  }
  // Queries a Registry by id.
	rpc Registry(QueryGetRegistryRequest) returns (QueryGetRegistryResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry/{id}";
	}

	// Queries a list of Registry items.
	rpc RegistryAll(QueryAllRegistryRequest) returns (QueryAllRegistryResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry";
	}

// Queries a RegistryOwner by id.
	rpc RegistryOwner(QueryGetRegistryOwnerRequest) returns (QueryGetRegistryOwnerResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry_owner/{id}";
	}

	// Queries a list of RegistryOwner items.
	rpc RegistryOwnerAll(QueryAllRegistryOwnerRequest) returns (QueryAllRegistryOwnerResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry_owner";
	}

// Queries a RegistryMember by id.
	rpc RegistryMember(QueryGetRegistryMemberRequest) returns (QueryGetRegistryMemberResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry_member/{id}";
	}

	// Queries a list of RegistryMember items.
	rpc RegistryMemberAll(QueryAllRegistryMemberRequest) returns (QueryAllRegistryMemberResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/registry_member";
	}

// Queries a PriceConsensus by id.
	rpc PriceConsensus(QueryGetPriceConsensusRequest) returns (QueryGetPriceConsensusResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/price_consensus/{id}";
	}

	// Queries a list of PriceConsensus items.
	rpc PriceConsensusAll(QueryAllPriceConsensusRequest) returns (QueryAllPriceConsensusResponse) {
		option (google.api.http).get = "/PriceChain/cprc/registry/price_consensus";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetRegistryRequest {
	uint64 id = 1;
}

message QueryGetRegistryResponse {
	Registry Registry = 1 [(gogoproto.nullable) = false];
}

message QueryAllRegistryRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRegistryResponse {
	repeated Registry Registry = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRegistryOwnerRequest {
	uint64 id = 1;
}

message QueryGetRegistryOwnerResponse {
	RegistryOwner RegistryOwner = 1 [(gogoproto.nullable) = false];
}

message QueryAllRegistryOwnerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRegistryOwnerResponse {
	repeated RegistryOwner RegistryOwner = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRegistryMemberRequest {
	uint64 id = 1;
}

message QueryGetRegistryMemberResponse {
	RegistryMember RegistryMember = 1 [(gogoproto.nullable) = false];
}

message QueryAllRegistryMemberRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRegistryMemberResponse {
	repeated RegistryMember RegistryMember = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPriceConsensusRequest {
	uint64 id = 1;
}

message QueryGetPriceConsensusResponse {
	PriceConsensus PriceConsensus = 1 [(gogoproto.nullable) = false];
}

message QueryAllPriceConsensusRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPriceConsensusResponse {
	repeated PriceConsensus PriceConsensus = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
