// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/price_consensus.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PriceConsensus struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryId    string `protobuf:"bytes,2,opt,name=registryId,proto3" json:"registryId,omitempty"`
	ProposedPrice string `protobuf:"bytes,3,opt,name=proposedPrice,proto3" json:"proposedPrice,omitempty"`
	ProposedAt    string `protobuf:"bytes,4,opt,name=proposedAt,proto3" json:"proposedAt,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	YesCount      string `protobuf:"bytes,6,opt,name=yesCount,proto3" json:"yesCount,omitempty"`
	NoCount       string `protobuf:"bytes,7,opt,name=noCount,proto3" json:"noCount,omitempty"`
	TotalVoted    string `protobuf:"bytes,8,opt,name=totalVoted,proto3" json:"totalVoted,omitempty"`
	Proposer      string `protobuf:"bytes,9,opt,name=proposer,proto3" json:"proposer,omitempty"`
	ProdInfo      string `protobuf:"bytes,10,opt,name=prodInfo,proto3" json:"prodInfo,omitempty"`
	Memo          string `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo,omitempty"`
	Reserved      string `protobuf:"bytes,12,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (m *PriceConsensus) Reset()         { *m = PriceConsensus{} }
func (m *PriceConsensus) String() string { return proto.CompactTextString(m) }
func (*PriceConsensus) ProtoMessage()    {}
func (*PriceConsensus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2233371b569bdf0d, []int{0}
}
func (m *PriceConsensus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceConsensus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceConsensus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceConsensus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceConsensus.Merge(m, src)
}
func (m *PriceConsensus) XXX_Size() int {
	return m.Size()
}
func (m *PriceConsensus) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceConsensus.DiscardUnknown(m)
}

var xxx_messageInfo_PriceConsensus proto.InternalMessageInfo

func (m *PriceConsensus) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PriceConsensus) GetRegistryId() string {
	if m != nil {
		return m.RegistryId
	}
	return ""
}

func (m *PriceConsensus) GetProposedPrice() string {
	if m != nil {
		return m.ProposedPrice
	}
	return ""
}

func (m *PriceConsensus) GetProposedAt() string {
	if m != nil {
		return m.ProposedAt
	}
	return ""
}

func (m *PriceConsensus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PriceConsensus) GetYesCount() string {
	if m != nil {
		return m.YesCount
	}
	return ""
}

func (m *PriceConsensus) GetNoCount() string {
	if m != nil {
		return m.NoCount
	}
	return ""
}

func (m *PriceConsensus) GetTotalVoted() string {
	if m != nil {
		return m.TotalVoted
	}
	return ""
}

func (m *PriceConsensus) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *PriceConsensus) GetProdInfo() string {
	if m != nil {
		return m.ProdInfo
	}
	return ""
}

func (m *PriceConsensus) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *PriceConsensus) GetReserved() string {
	if m != nil {
		return m.Reserved
	}
	return ""
}

func init() {
	proto.RegisterType((*PriceConsensus)(nil), "pricechain.rd_net.registry.PriceConsensus")
}

func init() { proto.RegisterFile("registry/price_consensus.proto", fileDescriptor_2233371b569bdf0d) }

var fileDescriptor_2233371b569bdf0d = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0x42, 0x31,
	0x18, 0xc5, 0xb9, 0x57, 0xe4, 0x4f, 0x55, 0x86, 0x0e, 0xa6, 0x61, 0x68, 0x88, 0x71, 0x60, 0xf1,
	0xde, 0xc1, 0x27, 0x50, 0x06, 0xc3, 0x66, 0x18, 0x1c, 0x5c, 0x08, 0xdc, 0x7e, 0xc2, 0x4d, 0xa4,
	0xdf, 0x4d, 0xfb, 0x5d, 0x23, 0x6f, 0xe1, 0x63, 0x39, 0x32, 0x3a, 0x38, 0x18, 0x78, 0x11, 0xd3,
	0x96, 0x82, 0x6e, 0x3d, 0xe7, 0x77, 0x7a, 0xbe, 0xe1, 0x30, 0x69, 0x60, 0x51, 0x5a, 0x32, 0xeb,
	0xbc, 0x32, 0x65, 0x01, 0xd3, 0x02, 0xb5, 0x05, 0x6d, 0x6b, 0x9b, 0x55, 0x06, 0x09, 0x79, 0xdf,
	0xdb, 0xc5, 0x72, 0x56, 0xea, 0xcc, 0xa8, 0xa9, 0x06, 0xca, 0xe2, 0x8f, 0xab, 0xef, 0x94, 0xf5,
	0x1e, 0x1d, 0x1e, 0xc5, 0x4f, 0xbc, 0xc7, 0xd2, 0x52, 0x89, 0x64, 0x90, 0x0c, 0x9b, 0x93, 0xb4,
	0x54, 0x5c, 0x32, 0x16, 0xe3, 0x63, 0x25, 0xd2, 0x41, 0x32, 0xec, 0x4e, 0xfe, 0x38, 0xfc, 0x9a,
	0x5d, 0x54, 0x06, 0x2b, 0xb4, 0xa0, 0x7c, 0x93, 0x38, 0xf1, 0x91, 0xff, 0xa6, 0x6b, 0x89, 0xc6,
	0x1d, 0x89, 0x66, 0x68, 0x39, 0x3a, 0xfc, 0x92, 0xb5, 0x2c, 0xcd, 0xa8, 0xb6, 0xe2, 0xd4, 0xb3,
	0xbd, 0xe2, 0x7d, 0xd6, 0x59, 0x83, 0x1d, 0x61, 0xad, 0x49, 0xb4, 0x3c, 0x39, 0x68, 0x2e, 0x58,
	0x5b, 0x63, 0x40, 0x6d, 0x8f, 0xa2, 0x74, 0xd7, 0x08, 0x69, 0xf6, 0xfa, 0x84, 0x04, 0x4a, 0x74,
	0xc2, 0xb5, 0xa3, 0xe3, 0x5a, 0xf7, 0xb7, 0x8d, 0xe8, 0x86, 0xd6, 0xa8, 0xf7, 0x4c, 0x8d, 0xf5,
	0x0b, 0x0a, 0x76, 0x60, 0x5e, 0x73, 0xce, 0x9a, 0x2b, 0x58, 0xa1, 0x38, 0xf3, 0xbe, 0x7f, 0xbb,
	0xbc, 0x01, 0x0b, 0xe6, 0x0d, 0x94, 0x38, 0x0f, 0xf9, 0xa8, 0xef, 0x1f, 0x3e, 0xb7, 0x32, 0xd9,
	0x6c, 0x65, 0xf2, 0xb3, 0x95, 0xc9, 0xc7, 0x4e, 0x36, 0x36, 0x3b, 0xd9, 0xf8, 0xda, 0xc9, 0xc6,
	0xf3, 0xcd, 0xa2, 0xa4, 0x65, 0x3d, 0xcf, 0x0a, 0x5c, 0xe5, 0x61, 0x00, 0xb7, 0x4f, 0x1e, 0xf6,
	0xc9, 0xdf, 0xf3, 0xc3, 0xa6, 0xb4, 0xae, 0xc0, 0xce, 0x5b, 0x7e, 0xca, 0xdb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc1, 0x7e, 0xb7, 0xe7, 0xec, 0x01, 0x00, 0x00,
}

func (m *PriceConsensus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceConsensus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceConsensus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ProdInfo) > 0 {
		i -= len(m.ProdInfo)
		copy(dAtA[i:], m.ProdInfo)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.ProdInfo)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TotalVoted) > 0 {
		i -= len(m.TotalVoted)
		copy(dAtA[i:], m.TotalVoted)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.TotalVoted)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NoCount) > 0 {
		i -= len(m.NoCount)
		copy(dAtA[i:], m.NoCount)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.NoCount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.YesCount) > 0 {
		i -= len(m.YesCount)
		copy(dAtA[i:], m.YesCount)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.YesCount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProposedAt) > 0 {
		i -= len(m.ProposedAt)
		copy(dAtA[i:], m.ProposedAt)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.ProposedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProposedPrice) > 0 {
		i -= len(m.ProposedPrice)
		copy(dAtA[i:], m.ProposedPrice)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.ProposedPrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RegistryId) > 0 {
		i -= len(m.RegistryId)
		copy(dAtA[i:], m.RegistryId)
		i = encodeVarintPriceConsensus(dAtA, i, uint64(len(m.RegistryId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPriceConsensus(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPriceConsensus(dAtA []byte, offset int, v uint64) int {
	offset -= sovPriceConsensus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceConsensus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPriceConsensus(uint64(m.Id))
	}
	l = len(m.RegistryId)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.ProposedPrice)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.ProposedAt)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.YesCount)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.NoCount)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.TotalVoted)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.ProdInfo)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovPriceConsensus(uint64(l))
	}
	return n
}

func sovPriceConsensus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPriceConsensus(x uint64) (n int) {
	return sovPriceConsensus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceConsensus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceConsensus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceConsensus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YesCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVoted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalVoted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProdInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProdInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPriceConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPriceConsensus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPriceConsensus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPriceConsensus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPriceConsensus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPriceConsensus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPriceConsensus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPriceConsensus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPriceConsensus = fmt.Errorf("proto: unexpected end of group")
)
