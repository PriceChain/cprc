// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/price_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PriceData struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	RegistryId   string `protobuf:"bytes,2,opt,name=registryId,proto3" json:"registryId,omitempty"`
	Creator      string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	StoreName    string `protobuf:"bytes,4,opt,name=storeName,proto3" json:"storeName,omitempty"`
	StoreAddr    string `protobuf:"bytes,5,opt,name=storeAddr,proto3" json:"storeAddr,omitempty"`
	PurchaseTime string `protobuf:"bytes,6,opt,name=purchaseTime,proto3" json:"purchaseTime,omitempty"`
	ProdName     string `protobuf:"bytes,7,opt,name=prodName,proto3" json:"prodName,omitempty"`
	Price        string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	ReceiptCode  string `protobuf:"bytes,9,opt,name=receiptCode,proto3" json:"receiptCode,omitempty"`
	Reserved     string `protobuf:"bytes,10,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (m *PriceData) Reset()         { *m = PriceData{} }
func (m *PriceData) String() string { return proto.CompactTextString(m) }
func (*PriceData) ProtoMessage()    {}
func (*PriceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1785e1db261199d4, []int{0}
}
func (m *PriceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceData.Merge(m, src)
}
func (m *PriceData) XXX_Size() int {
	return m.Size()
}
func (m *PriceData) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceData.DiscardUnknown(m)
}

var xxx_messageInfo_PriceData proto.InternalMessageInfo

func (m *PriceData) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PriceData) GetRegistryId() string {
	if m != nil {
		return m.RegistryId
	}
	return ""
}

func (m *PriceData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PriceData) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *PriceData) GetStoreAddr() string {
	if m != nil {
		return m.StoreAddr
	}
	return ""
}

func (m *PriceData) GetPurchaseTime() string {
	if m != nil {
		return m.PurchaseTime
	}
	return ""
}

func (m *PriceData) GetProdName() string {
	if m != nil {
		return m.ProdName
	}
	return ""
}

func (m *PriceData) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PriceData) GetReceiptCode() string {
	if m != nil {
		return m.ReceiptCode
	}
	return ""
}

func (m *PriceData) GetReserved() string {
	if m != nil {
		return m.Reserved
	}
	return ""
}

func init() {
	proto.RegisterType((*PriceData)(nil), "pricechain.cprc.registry.PriceData")
}

func init() { proto.RegisterFile("registry/price_data.proto", fileDescriptor_1785e1db261199d4) }

var fileDescriptor_1785e1db261199d4 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0xfb, 0x30,
	0x10, 0xc7, 0x9b, 0xfe, 0x7e, 0xfd, 0x13, 0xc3, 0x64, 0x31, 0x18, 0x84, 0xac, 0xaa, 0x13, 0x12,
	0x52, 0x32, 0xf0, 0x04, 0x50, 0x18, 0x58, 0x10, 0x42, 0x4c, 0x2c, 0xc8, 0xb5, 0x4f, 0xad, 0x87,
	0xd4, 0xd6, 0xc5, 0x45, 0xed, 0x5b, 0xf0, 0x1e, 0xbc, 0x08, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08,
	0xf2, 0x45, 0x09, 0x61, 0xfc, 0x7e, 0x3e, 0xa7, 0x93, 0xee, 0x7b, 0xec, 0x14, 0x61, 0x65, 0xcb,
	0x80, 0xfb, 0xdc, 0xa3, 0xd5, 0xf0, 0x6a, 0x54, 0x50, 0x99, 0x47, 0x17, 0x1c, 0x17, 0x44, 0xf4,
	0x5a, 0xd9, 0x4d, 0xa6, 0x3d, 0xea, 0xac, 0x1d, 0x9d, 0x7f, 0x0c, 0x59, 0xfa, 0x18, 0xe5, 0xad,
	0x0a, 0x8a, 0x9f, 0xb0, 0x91, 0xdd, 0x18, 0xd8, 0x89, 0x64, 0x96, 0x5c, 0xa4, 0x4f, 0x4d, 0xe0,
	0x92, 0xb1, 0x76, 0xfe, 0xde, 0x88, 0x21, 0xa9, 0x1e, 0xe1, 0x82, 0x4d, 0x34, 0x82, 0x0a, 0x0e,
	0xc5, 0x3f, 0x92, 0x6d, 0xe4, 0xe7, 0x2c, 0x2d, 0x83, 0x43, 0x78, 0x50, 0x05, 0x88, 0xff, 0xe4,
	0x7e, 0x41, 0x67, 0xaf, 0x8d, 0x41, 0x31, 0xea, 0xd9, 0x08, 0xf8, 0x9c, 0x1d, 0xfb, 0x2d, 0xea,
	0xb5, 0x2a, 0xe1, 0xd9, 0x16, 0x20, 0xc6, 0x34, 0xf0, 0x87, 0xf1, 0x33, 0x36, 0xf5, 0xe8, 0x0c,
	0xad, 0x9f, 0x90, 0xef, 0x72, 0xbc, 0x85, 0xae, 0x16, 0xd3, 0xe6, 0x16, 0x0a, 0x7c, 0xc6, 0x8e,
	0x10, 0x34, 0x58, 0x1f, 0x16, 0xce, 0x80, 0x48, 0xc9, 0xf5, 0x51, 0xdc, 0x89, 0x50, 0x02, 0xbe,
	0x81, 0x11, 0xac, 0xd9, 0xd9, 0xe6, 0x9b, 0xbb, 0xcf, 0x4a, 0x26, 0x87, 0x4a, 0x26, 0xdf, 0x95,
	0x4c, 0xde, 0x6b, 0x39, 0x38, 0xd4, 0x72, 0xf0, 0x55, 0xcb, 0xc1, 0xcb, 0xe5, 0xca, 0x86, 0xf5,
	0x76, 0x99, 0x69, 0x57, 0xe4, 0xd4, 0xe7, 0x22, 0x96, 0x9d, 0xc7, 0xb2, 0xf3, 0x5d, 0xde, 0x7d,
	0x26, 0xec, 0x3d, 0x94, 0xcb, 0x31, 0x7d, 0xe5, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x45,
	0xe0, 0x08, 0xb2, 0x01, 0x00, 0x00,
}

func (m *PriceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReceiptCode) > 0 {
		i -= len(m.ReceiptCode)
		copy(dAtA[i:], m.ReceiptCode)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.ReceiptCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProdName) > 0 {
		i -= len(m.ProdName)
		copy(dAtA[i:], m.ProdName)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.ProdName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PurchaseTime) > 0 {
		i -= len(m.PurchaseTime)
		copy(dAtA[i:], m.PurchaseTime)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.PurchaseTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StoreAddr) > 0 {
		i -= len(m.StoreAddr)
		copy(dAtA[i:], m.StoreAddr)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.StoreAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StoreName) > 0 {
		i -= len(m.StoreName)
		copy(dAtA[i:], m.StoreName)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.StoreName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RegistryId) > 0 {
		i -= len(m.RegistryId)
		copy(dAtA[i:], m.RegistryId)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.RegistryId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPriceData(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPriceData(dAtA []byte, offset int, v uint64) int {
	offset -= sovPriceData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.RegistryId)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.StoreAddr)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.PurchaseTime)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.ProdName)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.ReceiptCode)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovPriceData(uint64(l))
	}
	return n
}

func sovPriceData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPriceData(x uint64) (n int) {
	return sovPriceData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProdName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProdName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriceData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPriceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPriceData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPriceData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPriceData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPriceData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPriceData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPriceData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPriceData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPriceData = fmt.Errorf("proto: unexpected end of group")
)
