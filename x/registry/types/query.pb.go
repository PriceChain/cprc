// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetRegistryRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRegistryRequest) Reset()         { *m = QueryGetRegistryRequest{} }
func (m *QueryGetRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryRequest) ProtoMessage()    {}
func (*QueryGetRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{2}
}
func (m *QueryGetRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryRequest.Merge(m, src)
}
func (m *QueryGetRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryRequest proto.InternalMessageInfo

func (m *QueryGetRegistryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRegistryResponse struct {
	Registry Registry `protobuf:"bytes,1,opt,name=Registry,proto3" json:"Registry"`
}

func (m *QueryGetRegistryResponse) Reset()         { *m = QueryGetRegistryResponse{} }
func (m *QueryGetRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryResponse) ProtoMessage()    {}
func (*QueryGetRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{3}
}
func (m *QueryGetRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryResponse.Merge(m, src)
}
func (m *QueryGetRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryResponse proto.InternalMessageInfo

func (m *QueryGetRegistryResponse) GetRegistry() Registry {
	if m != nil {
		return m.Registry
	}
	return Registry{}
}

type QueryAllRegistryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryRequest) Reset()         { *m = QueryAllRegistryRequest{} }
func (m *QueryAllRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryRequest) ProtoMessage()    {}
func (*QueryAllRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{4}
}
func (m *QueryAllRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryRequest.Merge(m, src)
}
func (m *QueryAllRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryRequest proto.InternalMessageInfo

func (m *QueryAllRegistryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRegistryResponse struct {
	Registry   []Registry          `protobuf:"bytes,1,rep,name=Registry,proto3" json:"Registry"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryResponse) Reset()         { *m = QueryAllRegistryResponse{} }
func (m *QueryAllRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryResponse) ProtoMessage()    {}
func (*QueryAllRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{5}
}
func (m *QueryAllRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryResponse.Merge(m, src)
}
func (m *QueryAllRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryResponse proto.InternalMessageInfo

func (m *QueryAllRegistryResponse) GetRegistry() []Registry {
	if m != nil {
		return m.Registry
	}
	return nil
}

func (m *QueryAllRegistryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRegistryOwnerRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRegistryOwnerRequest) Reset()         { *m = QueryGetRegistryOwnerRequest{} }
func (m *QueryGetRegistryOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryOwnerRequest) ProtoMessage()    {}
func (*QueryGetRegistryOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{6}
}
func (m *QueryGetRegistryOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryOwnerRequest.Merge(m, src)
}
func (m *QueryGetRegistryOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryOwnerRequest proto.InternalMessageInfo

func (m *QueryGetRegistryOwnerRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRegistryOwnerResponse struct {
	RegistryOwner RegistryOwner `protobuf:"bytes,1,opt,name=RegistryOwner,proto3" json:"RegistryOwner"`
}

func (m *QueryGetRegistryOwnerResponse) Reset()         { *m = QueryGetRegistryOwnerResponse{} }
func (m *QueryGetRegistryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryOwnerResponse) ProtoMessage()    {}
func (*QueryGetRegistryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{7}
}
func (m *QueryGetRegistryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryOwnerResponse.Merge(m, src)
}
func (m *QueryGetRegistryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryOwnerResponse proto.InternalMessageInfo

func (m *QueryGetRegistryOwnerResponse) GetRegistryOwner() RegistryOwner {
	if m != nil {
		return m.RegistryOwner
	}
	return RegistryOwner{}
}

type QueryAllRegistryOwnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryOwnerRequest) Reset()         { *m = QueryAllRegistryOwnerRequest{} }
func (m *QueryAllRegistryOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryOwnerRequest) ProtoMessage()    {}
func (*QueryAllRegistryOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{8}
}
func (m *QueryAllRegistryOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryOwnerRequest.Merge(m, src)
}
func (m *QueryAllRegistryOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryOwnerRequest proto.InternalMessageInfo

func (m *QueryAllRegistryOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRegistryOwnerResponse struct {
	RegistryOwner []RegistryOwner     `protobuf:"bytes,1,rep,name=RegistryOwner,proto3" json:"RegistryOwner"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryOwnerResponse) Reset()         { *m = QueryAllRegistryOwnerResponse{} }
func (m *QueryAllRegistryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryOwnerResponse) ProtoMessage()    {}
func (*QueryAllRegistryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{9}
}
func (m *QueryAllRegistryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryOwnerResponse.Merge(m, src)
}
func (m *QueryAllRegistryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryOwnerResponse proto.InternalMessageInfo

func (m *QueryAllRegistryOwnerResponse) GetRegistryOwner() []RegistryOwner {
	if m != nil {
		return m.RegistryOwner
	}
	return nil
}

func (m *QueryAllRegistryOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRegistryMemberRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRegistryMemberRequest) Reset()         { *m = QueryGetRegistryMemberRequest{} }
func (m *QueryGetRegistryMemberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryMemberRequest) ProtoMessage()    {}
func (*QueryGetRegistryMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{10}
}
func (m *QueryGetRegistryMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryMemberRequest.Merge(m, src)
}
func (m *QueryGetRegistryMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryMemberRequest proto.InternalMessageInfo

func (m *QueryGetRegistryMemberRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRegistryMemberResponse struct {
	RegistryMember RegistryMember `protobuf:"bytes,1,opt,name=RegistryMember,proto3" json:"RegistryMember"`
}

func (m *QueryGetRegistryMemberResponse) Reset()         { *m = QueryGetRegistryMemberResponse{} }
func (m *QueryGetRegistryMemberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryMemberResponse) ProtoMessage()    {}
func (*QueryGetRegistryMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{11}
}
func (m *QueryGetRegistryMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryMemberResponse.Merge(m, src)
}
func (m *QueryGetRegistryMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryMemberResponse proto.InternalMessageInfo

func (m *QueryGetRegistryMemberResponse) GetRegistryMember() RegistryMember {
	if m != nil {
		return m.RegistryMember
	}
	return RegistryMember{}
}

type QueryAllRegistryMemberRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryMemberRequest) Reset()         { *m = QueryAllRegistryMemberRequest{} }
func (m *QueryAllRegistryMemberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryMemberRequest) ProtoMessage()    {}
func (*QueryAllRegistryMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{12}
}
func (m *QueryAllRegistryMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryMemberRequest.Merge(m, src)
}
func (m *QueryAllRegistryMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryMemberRequest proto.InternalMessageInfo

func (m *QueryAllRegistryMemberRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRegistryMemberResponse struct {
	RegistryMember []RegistryMember    `protobuf:"bytes,1,rep,name=RegistryMember,proto3" json:"RegistryMember"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryMemberResponse) Reset()         { *m = QueryAllRegistryMemberResponse{} }
func (m *QueryAllRegistryMemberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryMemberResponse) ProtoMessage()    {}
func (*QueryAllRegistryMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{13}
}
func (m *QueryAllRegistryMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryMemberResponse.Merge(m, src)
}
func (m *QueryAllRegistryMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryMemberResponse proto.InternalMessageInfo

func (m *QueryAllRegistryMemberResponse) GetRegistryMember() []RegistryMember {
	if m != nil {
		return m.RegistryMember
	}
	return nil
}

func (m *QueryAllRegistryMemberResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRegistryStakedAmountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRegistryStakedAmountRequest) Reset()         { *m = QueryGetRegistryStakedAmountRequest{} }
func (m *QueryGetRegistryStakedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryStakedAmountRequest) ProtoMessage()    {}
func (*QueryGetRegistryStakedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{14}
}
func (m *QueryGetRegistryStakedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryStakedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryStakedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryStakedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryStakedAmountRequest.Merge(m, src)
}
func (m *QueryGetRegistryStakedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryStakedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryStakedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryStakedAmountRequest proto.InternalMessageInfo

func (m *QueryGetRegistryStakedAmountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRegistryStakedAmountResponse struct {
	RegistryStakedAmount RegistryStakedAmount `protobuf:"bytes,1,opt,name=registryStakedAmount,proto3" json:"registryStakedAmount"`
}

func (m *QueryGetRegistryStakedAmountResponse) Reset()         { *m = QueryGetRegistryStakedAmountResponse{} }
func (m *QueryGetRegistryStakedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryStakedAmountResponse) ProtoMessage()    {}
func (*QueryGetRegistryStakedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{15}
}
func (m *QueryGetRegistryStakedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryStakedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryStakedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryStakedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryStakedAmountResponse.Merge(m, src)
}
func (m *QueryGetRegistryStakedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryStakedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryStakedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryStakedAmountResponse proto.InternalMessageInfo

func (m *QueryGetRegistryStakedAmountResponse) GetRegistryStakedAmount() RegistryStakedAmount {
	if m != nil {
		return m.RegistryStakedAmount
	}
	return RegistryStakedAmount{}
}

type QueryAllRegistryStakedAmountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryStakedAmountRequest) Reset()         { *m = QueryAllRegistryStakedAmountRequest{} }
func (m *QueryAllRegistryStakedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryStakedAmountRequest) ProtoMessage()    {}
func (*QueryAllRegistryStakedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{16}
}
func (m *QueryAllRegistryStakedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryStakedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryStakedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryStakedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryStakedAmountRequest.Merge(m, src)
}
func (m *QueryAllRegistryStakedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryStakedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryStakedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryStakedAmountRequest proto.InternalMessageInfo

func (m *QueryAllRegistryStakedAmountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRegistryStakedAmountResponse struct {
	RegistryStakedAmount []RegistryStakedAmount `protobuf:"bytes,1,rep,name=registryStakedAmount,proto3" json:"registryStakedAmount"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistryStakedAmountResponse) Reset()         { *m = QueryAllRegistryStakedAmountResponse{} }
func (m *QueryAllRegistryStakedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistryStakedAmountResponse) ProtoMessage()    {}
func (*QueryAllRegistryStakedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{17}
}
func (m *QueryAllRegistryStakedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistryStakedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistryStakedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistryStakedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistryStakedAmountResponse.Merge(m, src)
}
func (m *QueryAllRegistryStakedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistryStakedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistryStakedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistryStakedAmountResponse proto.InternalMessageInfo

func (m *QueryAllRegistryStakedAmountResponse) GetRegistryStakedAmount() []RegistryStakedAmount {
	if m != nil {
		return m.RegistryStakedAmount
	}
	return nil
}

func (m *QueryAllRegistryStakedAmountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStakedAmountPerWalletRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStakedAmountPerWalletRequest) Reset()         { *m = QueryGetStakedAmountPerWalletRequest{} }
func (m *QueryGetStakedAmountPerWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakedAmountPerWalletRequest) ProtoMessage()    {}
func (*QueryGetStakedAmountPerWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{18}
}
func (m *QueryGetStakedAmountPerWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakedAmountPerWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakedAmountPerWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakedAmountPerWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakedAmountPerWalletRequest.Merge(m, src)
}
func (m *QueryGetStakedAmountPerWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakedAmountPerWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakedAmountPerWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakedAmountPerWalletRequest proto.InternalMessageInfo

func (m *QueryGetStakedAmountPerWalletRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStakedAmountPerWalletResponse struct {
	StakedAmountPerWallet StakedAmountPerWallet `protobuf:"bytes,1,opt,name=stakedAmountPerWallet,proto3" json:"stakedAmountPerWallet"`
}

func (m *QueryGetStakedAmountPerWalletResponse) Reset()         { *m = QueryGetStakedAmountPerWalletResponse{} }
func (m *QueryGetStakedAmountPerWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakedAmountPerWalletResponse) ProtoMessage()    {}
func (*QueryGetStakedAmountPerWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{19}
}
func (m *QueryGetStakedAmountPerWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakedAmountPerWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakedAmountPerWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakedAmountPerWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakedAmountPerWalletResponse.Merge(m, src)
}
func (m *QueryGetStakedAmountPerWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakedAmountPerWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakedAmountPerWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakedAmountPerWalletResponse proto.InternalMessageInfo

func (m *QueryGetStakedAmountPerWalletResponse) GetStakedAmountPerWallet() StakedAmountPerWallet {
	if m != nil {
		return m.StakedAmountPerWallet
	}
	return StakedAmountPerWallet{}
}

type QueryAllStakedAmountPerWalletRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakedAmountPerWalletRequest) Reset()         { *m = QueryAllStakedAmountPerWalletRequest{} }
func (m *QueryAllStakedAmountPerWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakedAmountPerWalletRequest) ProtoMessage()    {}
func (*QueryAllStakedAmountPerWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{20}
}
func (m *QueryAllStakedAmountPerWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakedAmountPerWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakedAmountPerWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakedAmountPerWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakedAmountPerWalletRequest.Merge(m, src)
}
func (m *QueryAllStakedAmountPerWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakedAmountPerWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakedAmountPerWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakedAmountPerWalletRequest proto.InternalMessageInfo

func (m *QueryAllStakedAmountPerWalletRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakedAmountPerWalletResponse struct {
	StakedAmountPerWallet []StakedAmountPerWallet `protobuf:"bytes,1,rep,name=stakedAmountPerWallet,proto3" json:"stakedAmountPerWallet"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakedAmountPerWalletResponse) Reset()         { *m = QueryAllStakedAmountPerWalletResponse{} }
func (m *QueryAllStakedAmountPerWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakedAmountPerWalletResponse) ProtoMessage()    {}
func (*QueryAllStakedAmountPerWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{21}
}
func (m *QueryAllStakedAmountPerWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakedAmountPerWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakedAmountPerWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakedAmountPerWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakedAmountPerWalletResponse.Merge(m, src)
}
func (m *QueryAllStakedAmountPerWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakedAmountPerWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakedAmountPerWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakedAmountPerWalletResponse proto.InternalMessageInfo

func (m *QueryAllStakedAmountPerWalletResponse) GetStakedAmountPerWallet() []StakedAmountPerWallet {
	if m != nil {
		return m.StakedAmountPerWallet
	}
	return nil
}

func (m *QueryAllStakedAmountPerWalletResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPriceDataRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPriceDataRequest) Reset()         { *m = QueryGetPriceDataRequest{} }
func (m *QueryGetPriceDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceDataRequest) ProtoMessage()    {}
func (*QueryGetPriceDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{22}
}
func (m *QueryGetPriceDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceDataRequest.Merge(m, src)
}
func (m *QueryGetPriceDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceDataRequest proto.InternalMessageInfo

func (m *QueryGetPriceDataRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetPriceDataResponse struct {
	PriceData PriceData `protobuf:"bytes,1,opt,name=priceData,proto3" json:"priceData"`
}

func (m *QueryGetPriceDataResponse) Reset()         { *m = QueryGetPriceDataResponse{} }
func (m *QueryGetPriceDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceDataResponse) ProtoMessage()    {}
func (*QueryGetPriceDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{23}
}
func (m *QueryGetPriceDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceDataResponse.Merge(m, src)
}
func (m *QueryGetPriceDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceDataResponse proto.InternalMessageInfo

func (m *QueryGetPriceDataResponse) GetPriceData() PriceData {
	if m != nil {
		return m.PriceData
	}
	return PriceData{}
}

type QueryAllPriceDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceDataRequest) Reset()         { *m = QueryAllPriceDataRequest{} }
func (m *QueryAllPriceDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceDataRequest) ProtoMessage()    {}
func (*QueryAllPriceDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{24}
}
func (m *QueryAllPriceDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceDataRequest.Merge(m, src)
}
func (m *QueryAllPriceDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceDataRequest proto.InternalMessageInfo

func (m *QueryAllPriceDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPriceDataResponse struct {
	PriceData  []PriceData         `protobuf:"bytes,1,rep,name=priceData,proto3" json:"priceData"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceDataResponse) Reset()         { *m = QueryAllPriceDataResponse{} }
func (m *QueryAllPriceDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceDataResponse) ProtoMessage()    {}
func (*QueryAllPriceDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b7babacada5cb6, []int{25}
}
func (m *QueryAllPriceDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceDataResponse.Merge(m, src)
}
func (m *QueryAllPriceDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceDataResponse proto.InternalMessageInfo

func (m *QueryAllPriceDataResponse) GetPriceData() []PriceData {
	if m != nil {
		return m.PriceData
	}
	return nil
}

func (m *QueryAllPriceDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "pricechain.cprc.registry.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "pricechain.cprc.registry.QueryParamsResponse")
	proto.RegisterType((*QueryGetRegistryRequest)(nil), "pricechain.cprc.registry.QueryGetRegistryRequest")
	proto.RegisterType((*QueryGetRegistryResponse)(nil), "pricechain.cprc.registry.QueryGetRegistryResponse")
	proto.RegisterType((*QueryAllRegistryRequest)(nil), "pricechain.cprc.registry.QueryAllRegistryRequest")
	proto.RegisterType((*QueryAllRegistryResponse)(nil), "pricechain.cprc.registry.QueryAllRegistryResponse")
	proto.RegisterType((*QueryGetRegistryOwnerRequest)(nil), "pricechain.cprc.registry.QueryGetRegistryOwnerRequest")
	proto.RegisterType((*QueryGetRegistryOwnerResponse)(nil), "pricechain.cprc.registry.QueryGetRegistryOwnerResponse")
	proto.RegisterType((*QueryAllRegistryOwnerRequest)(nil), "pricechain.cprc.registry.QueryAllRegistryOwnerRequest")
	proto.RegisterType((*QueryAllRegistryOwnerResponse)(nil), "pricechain.cprc.registry.QueryAllRegistryOwnerResponse")
	proto.RegisterType((*QueryGetRegistryMemberRequest)(nil), "pricechain.cprc.registry.QueryGetRegistryMemberRequest")
	proto.RegisterType((*QueryGetRegistryMemberResponse)(nil), "pricechain.cprc.registry.QueryGetRegistryMemberResponse")
	proto.RegisterType((*QueryAllRegistryMemberRequest)(nil), "pricechain.cprc.registry.QueryAllRegistryMemberRequest")
	proto.RegisterType((*QueryAllRegistryMemberResponse)(nil), "pricechain.cprc.registry.QueryAllRegistryMemberResponse")
	proto.RegisterType((*QueryGetRegistryStakedAmountRequest)(nil), "pricechain.cprc.registry.QueryGetRegistryStakedAmountRequest")
	proto.RegisterType((*QueryGetRegistryStakedAmountResponse)(nil), "pricechain.cprc.registry.QueryGetRegistryStakedAmountResponse")
	proto.RegisterType((*QueryAllRegistryStakedAmountRequest)(nil), "pricechain.cprc.registry.QueryAllRegistryStakedAmountRequest")
	proto.RegisterType((*QueryAllRegistryStakedAmountResponse)(nil), "pricechain.cprc.registry.QueryAllRegistryStakedAmountResponse")
	proto.RegisterType((*QueryGetStakedAmountPerWalletRequest)(nil), "pricechain.cprc.registry.QueryGetStakedAmountPerWalletRequest")
	proto.RegisterType((*QueryGetStakedAmountPerWalletResponse)(nil), "pricechain.cprc.registry.QueryGetStakedAmountPerWalletResponse")
	proto.RegisterType((*QueryAllStakedAmountPerWalletRequest)(nil), "pricechain.cprc.registry.QueryAllStakedAmountPerWalletRequest")
	proto.RegisterType((*QueryAllStakedAmountPerWalletResponse)(nil), "pricechain.cprc.registry.QueryAllStakedAmountPerWalletResponse")
	proto.RegisterType((*QueryGetPriceDataRequest)(nil), "pricechain.cprc.registry.QueryGetPriceDataRequest")
	proto.RegisterType((*QueryGetPriceDataResponse)(nil), "pricechain.cprc.registry.QueryGetPriceDataResponse")
	proto.RegisterType((*QueryAllPriceDataRequest)(nil), "pricechain.cprc.registry.QueryAllPriceDataRequest")
	proto.RegisterType((*QueryAllPriceDataResponse)(nil), "pricechain.cprc.registry.QueryAllPriceDataResponse")
}

func init() { proto.RegisterFile("registry/query.proto", fileDescriptor_33b7babacada5cb6) }

var fileDescriptor_33b7babacada5cb6 = []byte{
	// 1166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xce, 0x64, 0xdb, 0x88, 0x4c, 0xa1, 0x82, 0xe9, 0x46, 0x49, 0xad, 0x76, 0x89, 0xa6, 0x69,
	0xf3, 0xa3, 0xa9, 0x9d, 0x6c, 0x4b, 0x88, 0x42, 0x5b, 0x48, 0x28, 0xe4, 0x84, 0x08, 0x5b, 0x01,
	0x12, 0x97, 0x65, 0x76, 0x77, 0x70, 0xac, 0xee, 0xda, 0xae, 0xed, 0xd0, 0x44, 0x55, 0x2f, 0x1c,
	0xb9, 0x50, 0x09, 0xfe, 0x00, 0x84, 0xc4, 0x01, 0x24, 0x8e, 0x08, 0x21, 0xc4, 0x81, 0x5b, 0x8f,
	0x15, 0x1c, 0x02, 0x12, 0x20, 0x94, 0xf0, 0x87, 0x54, 0x1e, 0x3f, 0xdb, 0xeb, 0xb5, 0xbd, 0xb6,
	0x37, 0xbe, 0xed, 0x7a, 0xde, 0x8f, 0xef, 0xfb, 0xde, 0x93, 0xfd, 0xd9, 0xb8, 0x6a, 0x71, 0x55,
	0xb3, 0x1d, 0xeb, 0x40, 0xb9, 0xbf, 0xc7, 0xad, 0x03, 0xd9, 0xb4, 0x0c, 0xc7, 0x20, 0x33, 0xa6,
	0xa5, 0xb5, 0x79, 0x7b, 0x97, 0x69, 0xba, 0xdc, 0x36, 0xad, 0xb6, 0xec, 0x47, 0x49, 0x55, 0xd5,
	0x50, 0x0d, 0x11, 0xa4, 0xb8, 0xbf, 0xbc, 0x78, 0xe9, 0x82, 0x6a, 0x18, 0x6a, 0x97, 0x2b, 0xcc,
	0xd4, 0x14, 0xa6, 0xeb, 0x86, 0xc3, 0x1c, 0xcd, 0xd0, 0x6d, 0x38, 0x5d, 0x6a, 0x1b, 0x76, 0xcf,
	0xb0, 0x95, 0x16, 0xb3, 0xb9, 0xd7, 0x46, 0xf9, 0x74, 0xb5, 0xc5, 0x1d, 0xb6, 0xaa, 0x98, 0x4c,
	0xd5, 0x74, 0x11, 0x0c, 0xb1, 0x53, 0x01, 0x1e, 0x93, 0x59, 0xac, 0xe7, 0x97, 0x98, 0x0e, 0x2e,
	0xfb, 0x3f, 0xe0, 0xe0, 0x62, 0xec, 0xa0, 0x69, 0x3c, 0xd0, 0xb9, 0x05, 0xc7, 0xb5, 0xf8, 0x71,
	0x8f, 0xf7, 0x5a, 0xc1, 0xf9, 0xe5, 0xf8, 0xb9, 0xed, 0xb0, 0x7b, 0xbc, 0xd3, 0x64, 0x3d, 0x63,
	0x4f, 0x77, 0x20, 0x6c, 0x3e, 0x08, 0x8b, 0x9c, 0x36, 0x4d, 0x6e, 0x35, 0x1f, 0xb0, 0x6e, 0x97,
	0xfb, 0x81, 0xe7, 0x43, 0xf8, 0xae, 0x82, 0xcd, 0x0e, 0x73, 0x98, 0x77, 0x44, 0xab, 0x98, 0xbc,
	0xe7, 0x72, 0xdf, 0x11, 0xbc, 0x1a, 0xfc, 0xfe, 0x1e, 0xb7, 0x1d, 0xfa, 0x3e, 0x3e, 0x17, 0xb9,
	0x6a, 0x9b, 0x86, 0x6e, 0x73, 0x72, 0x1b, 0x4f, 0x78, 0xfc, 0x67, 0xd0, 0x2c, 0x5a, 0x38, 0x53,
	0x9f, 0x95, 0xd3, 0x26, 0x22, 0x7b, 0x99, 0x5b, 0xa7, 0x9e, 0xfc, 0xfb, 0xf2, 0x58, 0x03, 0xb2,
	0xe8, 0x22, 0x9e, 0x16, 0x65, 0xb7, 0xb9, 0xd3, 0x80, 0x40, 0xe8, 0x48, 0xce, 0xe2, 0x71, 0xad,
	0x23, 0xca, 0x9e, 0x6a, 0x8c, 0x6b, 0x1d, 0xfa, 0x31, 0x9e, 0x89, 0x87, 0x02, 0x8c, 0x3b, 0xf8,
	0x39, 0xff, 0x1a, 0x00, 0xa1, 0xe9, 0x40, 0xfc, 0x48, 0x80, 0x12, 0x64, 0x52, 0x06, 0x60, 0x36,
	0xbb, 0xdd, 0x41, 0x30, 0x6f, 0x63, 0x1c, 0xae, 0x00, 0xb4, 0xb8, 0x22, 0x7b, 0xfb, 0x22, 0xbb,
	0xfb, 0x22, 0x7b, 0x6b, 0x09, 0xfb, 0x22, 0xef, 0x30, 0x95, 0x43, 0x6e, 0xa3, 0x2f, 0x93, 0x7e,
	0x87, 0x80, 0x45, 0xa4, 0x47, 0x22, 0x8b, 0xca, 0x68, 0x2c, 0xc8, 0x76, 0x04, 0xea, 0xb8, 0x80,
	0x3a, 0x9f, 0x09, 0xd5, 0x83, 0x10, 0xc1, 0x2a, 0xe3, 0x0b, 0x83, 0x82, 0xbf, 0xeb, 0xae, 0x6c,
	0xda, 0x80, 0x1c, 0x7c, 0x31, 0x25, 0x1e, 0xf8, 0xdd, 0xc5, 0x2f, 0x44, 0x0e, 0x40, 0xc7, 0xf9,
	0x6c, 0x92, 0x22, 0x1c, 0x98, 0x46, 0x6b, 0xd0, 0x4f, 0x00, 0x65, 0x9f, 0xa0, 0x11, 0x94, 0x65,
	0x4d, 0xee, 0x57, 0x04, 0xf4, 0xe2, 0x8d, 0xd2, 0xe9, 0x55, 0x4e, 0x4a, 0xaf, 0xbc, 0x69, 0x2a,
	0xf1, 0xe9, 0xbc, 0x23, 0xee, 0x30, 0x69, 0xe3, 0xdc, 0xc7, 0xb5, 0xb4, 0x04, 0x20, 0xfc, 0x01,
	0x3e, 0x1b, 0x3d, 0x01, 0x79, 0x17, 0xb2, 0x19, 0x7b, 0xf1, 0x40, 0x79, 0xa0, 0x0a, 0x55, 0xe3,
	0x4a, 0x47, 0xa1, 0x96, 0x35, 0xd3, 0xdf, 0x10, 0x70, 0x4c, 0xe8, 0x34, 0x84, 0x63, 0xe5, 0xe4,
	0x1c, 0xcb, 0x9b, 0xeb, 0x6b, 0xf8, 0xd2, 0xe0, 0x98, 0xee, 0x8a, 0x7b, 0xff, 0xa6, 0xb8, 0xf5,
	0xfb, 0x92, 0x55, 0xf1, 0x69, 0x4d, 0xef, 0xf0, 0x7d, 0xa1, 0xd6, 0x64, 0xc3, 0xfb, 0x43, 0x1f,
	0x23, 0x3c, 0x37, 0x3c, 0x1b, 0x64, 0xd8, 0x0d, 0x1f, 0xc0, 0xfd, 0xe7, 0xa0, 0xbd, 0x9c, 0x2d,
	0x46, 0x7f, 0x16, 0x48, 0x92, 0x58, 0x91, 0xf6, 0x80, 0x4f, 0xdf, 0x48, 0x92, 0xf8, 0x94, 0xb5,
	0x02, 0x7f, 0xf9, 0x0a, 0xa4, 0xf6, 0xcb, 0x54, 0xa0, 0x52, 0xae, 0x02, 0xe5, 0xad, 0xc6, 0xcd,
	0x70, 0xb8, 0xfd, 0x0d, 0x76, 0xb8, 0xf5, 0xa1, 0xf0, 0x02, 0xc3, 0x77, 0xe3, 0x2b, 0x84, 0x2f,
	0x67, 0xa4, 0x83, 0x34, 0xf7, 0xf0, 0x94, 0x9d, 0x14, 0x00, 0x63, 0x51, 0xd2, 0xb5, 0x49, 0xac,
	0x0b, 0xe2, 0x24, 0xd7, 0xa4, 0x7a, 0x38, 0xaf, 0xa1, 0xa4, 0xca, 0x5a, 0x90, 0x7f, 0x7c, 0x19,
	0xd2, 0x1b, 0x66, 0xcb, 0x50, 0x29, 0x5b, 0x86, 0xf2, 0x96, 0x64, 0x25, 0xb4, 0x55, 0x3b, 0x2e,
	0xbe, 0x3b, 0xcc, 0x61, 0xc3, 0x17, 0xa3, 0x83, 0xcf, 0x27, 0x64, 0x80, 0x08, 0xdb, 0x78, 0xd2,
	0xf4, 0x2f, 0x82, 0xea, 0x97, 0x86, 0x78, 0x42, 0x3f, 0x14, 0xc8, 0x86, 0xb9, 0xb4, 0x15, 0x1a,
	0xa5, 0x18, 0xae, 0xb2, 0x66, 0xfb, 0x03, 0x02, 0x2a, 0xd1, 0x26, 0xc9, 0x54, 0x2a, 0xa3, 0x52,
	0x29, 0x6d, 0x56, 0xf5, 0xcf, 0xcf, 0xe1, 0xd3, 0x02, 0x2f, 0xf9, 0x02, 0xe1, 0x09, 0xcf, 0x50,
	0x93, 0xe5, 0x74, 0x4c, 0x71, 0x1f, 0x2f, 0x5d, 0xcb, 0x19, 0xed, 0x75, 0xa7, 0x0b, 0x9f, 0xfd,
	0xf1, 0xff, 0x97, 0xe3, 0x94, 0xcc, 0x2a, 0x82, 0xdf, 0x9b, 0x6e, 0x9a, 0xe2, 0xa6, 0x29, 0x03,
	0xef, 0x3f, 0xe4, 0x1b, 0x14, 0xba, 0x57, 0xb2, 0x9a, 0xd1, 0x25, 0x6e, 0xf7, 0xa5, 0x7a, 0x91,
	0x14, 0x40, 0xa7, 0x08, 0x74, 0x8b, 0x64, 0x3e, 0x1d, 0x5d, 0xf0, 0xe3, 0xa1, 0xd6, 0x79, 0x44,
	0xbe, 0x46, 0xf8, 0x8c, 0x5f, 0x65, 0xb3, 0xdb, 0xcd, 0xc4, 0x19, 0x7f, 0x13, 0xc8, 0xc4, 0x99,
	0x60, 0xec, 0xe9, 0x92, 0xc0, 0x39, 0x47, 0x68, 0x36, 0x4e, 0xf2, 0x13, 0x1a, 0xb0, 0x91, 0x64,
	0x2d, 0xbf, 0x32, 0xfd, 0xce, 0x57, 0x7a, 0xb5, 0x70, 0x1e, 0xc0, 0x7d, 0x45, 0xc0, 0x55, 0xc8,
	0xb5, 0x6c, 0xb8, 0xde, 0x4b, 0xac, 0x27, 0xee, 0x8f, 0x08, 0xbf, 0x18, 0x29, 0xe8, 0x2a, 0xbc,
	0x96, 0x5f, 0xae, 0x42, 0xe0, 0xd3, 0x5c, 0x38, 0x5d, 0x11, 0xe0, 0x97, 0xc8, 0x42, 0x5e, 0xf0,
	0xe4, 0x17, 0x34, 0xe8, 0xf1, 0x48, 0x01, 0xe9, 0x22, 0xce, 0x54, 0x5a, 0x2f, 0x9e, 0x08, 0xb8,
	0xd7, 0x04, 0xee, 0x15, 0x22, 0xe7, 0xc0, 0xed, 0x7d, 0x1a, 0xf0, 0x54, 0xff, 0x19, 0xe1, 0x97,
	0xa2, 0x25, 0x5d, 0xd9, 0x0b, 0xc8, 0x57, 0x8c, 0x40, 0xaa, 0x53, 0xa6, 0xab, 0x82, 0xc0, 0x55,
	0xb2, 0x98, 0x9b, 0x00, 0x39, 0x44, 0xb8, 0x9a, 0x64, 0x8f, 0xc8, 0xad, 0xfc, 0x32, 0x26, 0x98,
	0x43, 0xe9, 0xf6, 0xa8, 0xe9, 0x40, 0xe5, 0x0d, 0x41, 0x65, 0x83, 0xac, 0xe7, 0xa0, 0x12, 0xf9,
	0xd0, 0xa2, 0x3c, 0x14, 0x8f, 0xc8, 0x47, 0xe4, 0x77, 0x84, 0xa7, 0x93, 0x5a, 0xb8, 0xb3, 0xb9,
	0x95, 0x5f, 0xe2, 0x51, 0xc8, 0x65, 0x18, 0x59, 0xba, 0x2e, 0xc8, 0xd5, 0xc9, 0x4a, 0x51, 0x72,
	0xe4, 0x6f, 0x84, 0xa7, 0x12, 0xad, 0x0a, 0xc9, 0x21, 0xf8, 0x30, 0xb3, 0x26, 0xbd, 0x3e, 0x72,
	0x3e, 0x90, 0xda, 0x12, 0xa4, 0x6e, 0x92, 0x8d, 0x74, 0x52, 0x69, 0x5f, 0xc4, 0x82, 0x99, 0x1d,
	0x22, 0x3c, 0x93, 0xd8, 0xc5, 0x1d, 0x5a, 0x0e, 0xd5, 0x4f, 0xc4, 0x30, 0xcb, 0x5d, 0xd2, 0x0d,
	0xc1, 0xf0, 0x06, 0xa9, 0x17, 0x67, 0x48, 0xbe, 0x47, 0x78, 0x32, 0xf0, 0x27, 0x24, 0xc7, 0x93,
	0x76, 0xd0, 0x71, 0x49, 0xd7, 0x0b, 0xe5, 0x00, 0xe4, 0x1b, 0x02, 0xb2, 0x4c, 0x96, 0x87, 0x98,
	0x87, 0xe0, 0xeb, 0x63, 0x30, 0x86, 0x6f, 0x11, 0x7e, 0x3e, 0xa8, 0xe5, 0x4a, 0x9f, 0xe3, 0x89,
	0x5b, 0x18, 0x6f, 0x92, 0xe1, 0xa3, 0xcb, 0x02, 0xef, 0x15, 0x32, 0x97, 0x07, 0xef, 0xd6, 0x5b,
	0x4f, 0x8e, 0x6a, 0xe8, 0xe9, 0x51, 0x0d, 0xfd, 0x77, 0x54, 0x43, 0x8f, 0x8f, 0x6b, 0x63, 0x4f,
	0x8f, 0x6b, 0x63, 0x7f, 0x1e, 0xd7, 0xc6, 0x3e, 0xba, 0xaa, 0x6a, 0xce, 0xee, 0x5e, 0x4b, 0x6e,
	0x1b, 0xbd, 0x58, 0xa5, 0xfd, 0xb0, 0x96, 0x73, 0x60, 0x72, 0xbb, 0x35, 0x21, 0xbe, 0xba, 0x5e,
	0x7f, 0x16, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x72, 0x34, 0x09, 0xe1, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Registry by id.
	Registry(ctx context.Context, in *QueryGetRegistryRequest, opts ...grpc.CallOption) (*QueryGetRegistryResponse, error)
	// Queries a list of Registry items.
	RegistryAll(ctx context.Context, in *QueryAllRegistryRequest, opts ...grpc.CallOption) (*QueryAllRegistryResponse, error)
	// Queries a RegistryOwner by id.
	RegistryOwner(ctx context.Context, in *QueryGetRegistryOwnerRequest, opts ...grpc.CallOption) (*QueryGetRegistryOwnerResponse, error)
	// Queries a list of RegistryOwner items.
	RegistryOwnerAll(ctx context.Context, in *QueryAllRegistryOwnerRequest, opts ...grpc.CallOption) (*QueryAllRegistryOwnerResponse, error)
	// Queries a RegistryMember by id.
	RegistryMember(ctx context.Context, in *QueryGetRegistryMemberRequest, opts ...grpc.CallOption) (*QueryGetRegistryMemberResponse, error)
	// Queries a list of RegistryMember items.
	RegistryMemberAll(ctx context.Context, in *QueryAllRegistryMemberRequest, opts ...grpc.CallOption) (*QueryAllRegistryMemberResponse, error)
	// Queries a RegistryStakedAmount by index.
	RegistryStakedAmount(ctx context.Context, in *QueryGetRegistryStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetRegistryStakedAmountResponse, error)
	// Queries a list of RegistryStakedAmount items.
	RegistryStakedAmountAll(ctx context.Context, in *QueryAllRegistryStakedAmountRequest, opts ...grpc.CallOption) (*QueryAllRegistryStakedAmountResponse, error)
	// Queries a StakedAmountPerWallet by index.
	StakedAmountPerWallet(ctx context.Context, in *QueryGetStakedAmountPerWalletRequest, opts ...grpc.CallOption) (*QueryGetStakedAmountPerWalletResponse, error)
	// Queries a list of StakedAmountPerWallet items.
	StakedAmountPerWalletAll(ctx context.Context, in *QueryAllStakedAmountPerWalletRequest, opts ...grpc.CallOption) (*QueryAllStakedAmountPerWalletResponse, error)
	// Queries a PriceData by index.
	PriceData(ctx context.Context, in *QueryGetPriceDataRequest, opts ...grpc.CallOption) (*QueryGetPriceDataResponse, error)
	// Queries a list of PriceData items.
	PriceDataAll(ctx context.Context, in *QueryAllPriceDataRequest, opts ...grpc.CallOption) (*QueryAllPriceDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Registry(ctx context.Context, in *QueryGetRegistryRequest, opts ...grpc.CallOption) (*QueryGetRegistryResponse, error) {
	out := new(QueryGetRegistryResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/Registry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryAll(ctx context.Context, in *QueryAllRegistryRequest, opts ...grpc.CallOption) (*QueryAllRegistryResponse, error) {
	out := new(QueryAllRegistryResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryOwner(ctx context.Context, in *QueryGetRegistryOwnerRequest, opts ...grpc.CallOption) (*QueryGetRegistryOwnerResponse, error) {
	out := new(QueryGetRegistryOwnerResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryOwnerAll(ctx context.Context, in *QueryAllRegistryOwnerRequest, opts ...grpc.CallOption) (*QueryAllRegistryOwnerResponse, error) {
	out := new(QueryAllRegistryOwnerResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryOwnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryMember(ctx context.Context, in *QueryGetRegistryMemberRequest, opts ...grpc.CallOption) (*QueryGetRegistryMemberResponse, error) {
	out := new(QueryGetRegistryMemberResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryMemberAll(ctx context.Context, in *QueryAllRegistryMemberRequest, opts ...grpc.CallOption) (*QueryAllRegistryMemberResponse, error) {
	out := new(QueryAllRegistryMemberResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryMemberAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryStakedAmount(ctx context.Context, in *QueryGetRegistryStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetRegistryStakedAmountResponse, error) {
	out := new(QueryGetRegistryStakedAmountResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryStakedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistryStakedAmountAll(ctx context.Context, in *QueryAllRegistryStakedAmountRequest, opts ...grpc.CallOption) (*QueryAllRegistryStakedAmountResponse, error) {
	out := new(QueryAllRegistryStakedAmountResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/RegistryStakedAmountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedAmountPerWallet(ctx context.Context, in *QueryGetStakedAmountPerWalletRequest, opts ...grpc.CallOption) (*QueryGetStakedAmountPerWalletResponse, error) {
	out := new(QueryGetStakedAmountPerWalletResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/StakedAmountPerWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedAmountPerWalletAll(ctx context.Context, in *QueryAllStakedAmountPerWalletRequest, opts ...grpc.CallOption) (*QueryAllStakedAmountPerWalletResponse, error) {
	out := new(QueryAllStakedAmountPerWalletResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/StakedAmountPerWalletAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceData(ctx context.Context, in *QueryGetPriceDataRequest, opts ...grpc.CallOption) (*QueryGetPriceDataResponse, error) {
	out := new(QueryGetPriceDataResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/PriceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceDataAll(ctx context.Context, in *QueryAllPriceDataRequest, opts ...grpc.CallOption) (*QueryAllPriceDataResponse, error) {
	out := new(QueryAllPriceDataResponse)
	err := c.cc.Invoke(ctx, "/pricechain.cprc.registry.Query/PriceDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Registry by id.
	Registry(context.Context, *QueryGetRegistryRequest) (*QueryGetRegistryResponse, error)
	// Queries a list of Registry items.
	RegistryAll(context.Context, *QueryAllRegistryRequest) (*QueryAllRegistryResponse, error)
	// Queries a RegistryOwner by id.
	RegistryOwner(context.Context, *QueryGetRegistryOwnerRequest) (*QueryGetRegistryOwnerResponse, error)
	// Queries a list of RegistryOwner items.
	RegistryOwnerAll(context.Context, *QueryAllRegistryOwnerRequest) (*QueryAllRegistryOwnerResponse, error)
	// Queries a RegistryMember by id.
	RegistryMember(context.Context, *QueryGetRegistryMemberRequest) (*QueryGetRegistryMemberResponse, error)
	// Queries a list of RegistryMember items.
	RegistryMemberAll(context.Context, *QueryAllRegistryMemberRequest) (*QueryAllRegistryMemberResponse, error)
	// Queries a RegistryStakedAmount by index.
	RegistryStakedAmount(context.Context, *QueryGetRegistryStakedAmountRequest) (*QueryGetRegistryStakedAmountResponse, error)
	// Queries a list of RegistryStakedAmount items.
	RegistryStakedAmountAll(context.Context, *QueryAllRegistryStakedAmountRequest) (*QueryAllRegistryStakedAmountResponse, error)
	// Queries a StakedAmountPerWallet by index.
	StakedAmountPerWallet(context.Context, *QueryGetStakedAmountPerWalletRequest) (*QueryGetStakedAmountPerWalletResponse, error)
	// Queries a list of StakedAmountPerWallet items.
	StakedAmountPerWalletAll(context.Context, *QueryAllStakedAmountPerWalletRequest) (*QueryAllStakedAmountPerWalletResponse, error)
	// Queries a PriceData by index.
	PriceData(context.Context, *QueryGetPriceDataRequest) (*QueryGetPriceDataResponse, error)
	// Queries a list of PriceData items.
	PriceDataAll(context.Context, *QueryAllPriceDataRequest) (*QueryAllPriceDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Registry(ctx context.Context, req *QueryGetRegistryRequest) (*QueryGetRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registry not implemented")
}
func (*UnimplementedQueryServer) RegistryAll(ctx context.Context, req *QueryAllRegistryRequest) (*QueryAllRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryAll not implemented")
}
func (*UnimplementedQueryServer) RegistryOwner(ctx context.Context, req *QueryGetRegistryOwnerRequest) (*QueryGetRegistryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryOwner not implemented")
}
func (*UnimplementedQueryServer) RegistryOwnerAll(ctx context.Context, req *QueryAllRegistryOwnerRequest) (*QueryAllRegistryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryOwnerAll not implemented")
}
func (*UnimplementedQueryServer) RegistryMember(ctx context.Context, req *QueryGetRegistryMemberRequest) (*QueryGetRegistryMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryMember not implemented")
}
func (*UnimplementedQueryServer) RegistryMemberAll(ctx context.Context, req *QueryAllRegistryMemberRequest) (*QueryAllRegistryMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryMemberAll not implemented")
}
func (*UnimplementedQueryServer) RegistryStakedAmount(ctx context.Context, req *QueryGetRegistryStakedAmountRequest) (*QueryGetRegistryStakedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryStakedAmount not implemented")
}
func (*UnimplementedQueryServer) RegistryStakedAmountAll(ctx context.Context, req *QueryAllRegistryStakedAmountRequest) (*QueryAllRegistryStakedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryStakedAmountAll not implemented")
}
func (*UnimplementedQueryServer) StakedAmountPerWallet(ctx context.Context, req *QueryGetStakedAmountPerWalletRequest) (*QueryGetStakedAmountPerWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedAmountPerWallet not implemented")
}
func (*UnimplementedQueryServer) StakedAmountPerWalletAll(ctx context.Context, req *QueryAllStakedAmountPerWalletRequest) (*QueryAllStakedAmountPerWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedAmountPerWalletAll not implemented")
}
func (*UnimplementedQueryServer) PriceData(ctx context.Context, req *QueryGetPriceDataRequest) (*QueryGetPriceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceData not implemented")
}
func (*UnimplementedQueryServer) PriceDataAll(ctx context.Context, req *QueryAllPriceDataRequest) (*QueryAllPriceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceDataAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Registry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Registry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/Registry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Registry(ctx, req.(*QueryGetRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryAll(ctx, req.(*QueryAllRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistryOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryOwner(ctx, req.(*QueryGetRegistryOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryOwnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRegistryOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryOwnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryOwnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryOwnerAll(ctx, req.(*QueryAllRegistryOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistryMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryMember(ctx, req.(*QueryGetRegistryMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryMemberAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRegistryMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryMemberAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryMemberAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryMemberAll(ctx, req.(*QueryAllRegistryMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryStakedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistryStakedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryStakedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryStakedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryStakedAmount(ctx, req.(*QueryGetRegistryStakedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistryStakedAmountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRegistryStakedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistryStakedAmountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/RegistryStakedAmountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistryStakedAmountAll(ctx, req.(*QueryAllRegistryStakedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedAmountPerWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakedAmountPerWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedAmountPerWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/StakedAmountPerWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedAmountPerWallet(ctx, req.(*QueryGetStakedAmountPerWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedAmountPerWalletAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakedAmountPerWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedAmountPerWalletAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/StakedAmountPerWalletAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedAmountPerWalletAll(ctx, req.(*QueryAllStakedAmountPerWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/PriceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceData(ctx, req.(*QueryGetPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricechain.cprc.registry.Query/PriceDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceDataAll(ctx, req.(*QueryAllPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pricechain.cprc.registry.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Registry",
			Handler:    _Query_Registry_Handler,
		},
		{
			MethodName: "RegistryAll",
			Handler:    _Query_RegistryAll_Handler,
		},
		{
			MethodName: "RegistryOwner",
			Handler:    _Query_RegistryOwner_Handler,
		},
		{
			MethodName: "RegistryOwnerAll",
			Handler:    _Query_RegistryOwnerAll_Handler,
		},
		{
			MethodName: "RegistryMember",
			Handler:    _Query_RegistryMember_Handler,
		},
		{
			MethodName: "RegistryMemberAll",
			Handler:    _Query_RegistryMemberAll_Handler,
		},
		{
			MethodName: "RegistryStakedAmount",
			Handler:    _Query_RegistryStakedAmount_Handler,
		},
		{
			MethodName: "RegistryStakedAmountAll",
			Handler:    _Query_RegistryStakedAmountAll_Handler,
		},
		{
			MethodName: "StakedAmountPerWallet",
			Handler:    _Query_StakedAmountPerWallet_Handler,
		},
		{
			MethodName: "StakedAmountPerWalletAll",
			Handler:    _Query_StakedAmountPerWalletAll_Handler,
		},
		{
			MethodName: "PriceData",
			Handler:    _Query_PriceData_Handler,
		},
		{
			MethodName: "PriceDataAll",
			Handler:    _Query_PriceDataAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Registry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registry) > 0 {
		for iNdEx := len(m.Registry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RegistryOwner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryOwner) > 0 {
		for iNdEx := len(m.RegistryOwner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistryOwner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RegistryMember.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryMember) > 0 {
		for iNdEx := len(m.RegistryMember) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistryMember[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryStakedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryStakedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryStakedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryStakedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryStakedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryStakedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RegistryStakedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryStakedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryStakedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryStakedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistryStakedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistryStakedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistryStakedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryStakedAmount) > 0 {
		for iNdEx := len(m.RegistryStakedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistryStakedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakedAmountPerWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakedAmountPerWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakedAmountPerWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakedAmountPerWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakedAmountPerWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakedAmountPerWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakedAmountPerWallet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStakedAmountPerWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakedAmountPerWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakedAmountPerWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakedAmountPerWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakedAmountPerWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakedAmountPerWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakedAmountPerWallet) > 0 {
		for iNdEx := len(m.StakedAmountPerWallet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakedAmountPerWallet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PriceData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PriceData) > 0 {
		for iNdEx := len(m.PriceData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Registry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for _, e := range m.Registry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistryOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRegistryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RegistryOwner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRegistryOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRegistryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistryOwner) > 0 {
		for _, e := range m.RegistryOwner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistryMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRegistryMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RegistryMember.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRegistryMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRegistryMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistryMember) > 0 {
		for _, e := range m.RegistryMember {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistryStakedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistryStakedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RegistryStakedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRegistryStakedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRegistryStakedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistryStakedAmount) > 0 {
		for _, e := range m.RegistryStakedAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakedAmountPerWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakedAmountPerWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakedAmountPerWallet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStakedAmountPerWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakedAmountPerWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakedAmountPerWallet) > 0 {
		for _, e := range m.StakedAmountPerWallet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PriceData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPriceDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPriceDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceData) > 0 {
		for _, e := range m.PriceData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Registry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = append(m.Registry, Registry{})
			if err := m.Registry[len(m.Registry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistryOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryOwner = append(m.RegistryOwner, RegistryOwner{})
			if err := m.RegistryOwner[len(m.RegistryOwner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistryMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryMember = append(m.RegistryMember, RegistryMember{})
			if err := m.RegistryMember[len(m.RegistryMember)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryStakedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryStakedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryStakedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryStakedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryStakedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryStakedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistryStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryStakedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryStakedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryStakedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistryStakedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistryStakedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistryStakedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryStakedAmount = append(m.RegistryStakedAmount, RegistryStakedAmount{})
			if err := m.RegistryStakedAmount[len(m.RegistryStakedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakedAmountPerWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakedAmountPerWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakedAmountPerWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakedAmountPerWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakedAmountPerWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakedAmountPerWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmountPerWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedAmountPerWallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakedAmountPerWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakedAmountPerWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakedAmountPerWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakedAmountPerWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakedAmountPerWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakedAmountPerWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmountPerWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedAmountPerWallet = append(m.StakedAmountPerWallet, StakedAmountPerWallet{})
			if err := m.StakedAmountPerWallet[len(m.StakedAmountPerWallet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceData = append(m.PriceData, PriceData{})
			if err := m.PriceData[len(m.PriceData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
